#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int first;
    int second;
} Pair;

// Function to swap two pairs
void swap(Pair* a, Pair* b) {
    Pair temp = *a;
    *a = *b;
    *b = temp;
}

// Min-heap comparator to simulate the behavior of priority_queue
void heapify(Pair heap[], int n, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && heap[left].first < heap[smallest].first) {
        smallest = left;
    }
    if (right < n && heap[right].first < heap[smallest].first) {
        smallest = right;
    }
    
    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        heapify(heap, n, smallest);
    }
}

// Extract the minimum element from the heap
Pair extractMin(Pair heap[], int* n) {
    Pair root = heap[0];
    heap[0] = heap[*n - 1];
    (*n)--;
    heapify(heap, *n, 0);
    return root;
}

// Insert an element into the heap
void insertHeap(Pair heap[], int* n, Pair newPair) {
    (*n)++;
    int i = *n - 1;
    heap[i] = newPair;

    // Fix the min heap property if violated
    while (i != 0 && heap[(i - 1) / 2].first > heap[i].first) {
        swap(&heap[i], &heap[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

// Compare function used for qsort
int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

// Function to check if it is possible to divide the array
int isPossibleDivide(int* nums, int numsSize, int k) {
    if (numsSize % k != 0) return 0;

    qsort(nums, numsSize, sizeof(int), compare); // Sort the array

    Pair* heap = (Pair*)malloc(numsSize * sizeof(Pair));
    int heapSize = 0;

    for (int i = 0; i < numsSize; i++) {
        if (heapSize == 0 || nums[i] == heap[0].first) {
            if (k > 1) {
                insertHeap(heap, &heapSize, (Pair){nums[i], 1});
            }
        } else if (nums[i] == heap[0].first + 1) {
            Pair top = extractMin(heap, &heapSize);
            if (top.second + 1 < k) {
                insertHeap(heap, &heapSize, (Pair){nums[i], top.second + 1});
            }
        } else {
            free(heap);
            return 0; // Non-consecutive number
        }
    }

    free(heap);
    return heapSize == 0; // Check if all sets are complete
}
