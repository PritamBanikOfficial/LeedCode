// Helper function to invert a character
char invert(char c) {
    return c == '0' ? '1' : '0';
}

// Recursive function to find the k-th bit in S_n
char findKthBit(int n, int k) {
    // Base case
    if (n == 1) {
        return '0'; // S_1 = "0"
    }
    
    // Length of S_n is 2^n - 1
    int length = (1 << n) - 1;
    int mid = (length + 1) / 2;
    
    // If k is the middle element, return '1'
    if (k == mid) {
        return '1';
    }
    // If k is in the first half, recursively find in S_{n-1}
    else if (k < mid) {
        return findKthBit(n - 1, k);
    }
    // If k is in the second half, find in the first half of S_{n-1} and invert
    else {
        return invert(findKthBit(n - 1, length - k + 1));
    }
}