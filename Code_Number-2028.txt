#include <stdlib.h>

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* missingRolls(int* rolls, int rollsSize, int mean, int n, int* returnSize) {
    // Calculate the sum of the existing observations
    int sum = 0;
    for (int i = 0; i < rollsSize; i++) {
        sum += rolls[i];
    }

    // Calculate the total sum required by the mean
    int totalSum = mean * (rollsSize + n);
    int missingSum = totalSum - sum;

    // If the missing sum is not achievable, return an empty array
    if (missingSum < n || missingSum > 6 * n) {
        *returnSize = 0;
        return NULL;
    }

    // Allocate memory for the result array
    int* result = (int*)malloc(n * sizeof(int));

    // Distribute the missing sum over n rolls
    int base = missingSum / n;
    int remainder = missingSum % n;

    for (int i = 0; i < n; i++) {
        result[i] = base + (i < remainder ? 1 : 0);
    }

    // Set the return size and return the result
    *returnSize = n;
    return result;
}
