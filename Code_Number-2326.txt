int** spiralMatrix(int m, int n, struct ListNode* head, int* returnSize, int** returnColumnSizes) {
    // Allocate memory for the matrix.
    int** matrix = (int**)malloc(m * sizeof(int*));
    for (int i = 0; i < m; i++) {
        matrix[i] = (int*)malloc(n * sizeof(int));
    }

    // Set return size and column sizes.
    *returnSize = m;
    *returnColumnSizes = (int*)malloc(m * sizeof(int));
    for (int i = 0; i < m; i++) {
        (*returnColumnSizes)[i] = n;
    }

    // Initialize boundaries.
    int top = 0, bottom = m - 1, left = 0, right = n - 1;
    struct ListNode* curr = head;

    while (top <= bottom && left <= right) {
        // Fill top row.
        for (int i = left; i <= right; i++) {
            matrix[top][i] = curr ? curr->val : -1;
            if (curr) curr = curr->next;
        }
        top++; // Move the top boundary down.

        // Fill right column.
        for (int i = top; i <= bottom; i++) {
            matrix[i][right] = curr ? curr->val : -1;
            if (curr) curr = curr->next;
        }
        right--; // Move the right boundary left.

        // Fill bottom row (if top boundary has not surpassed bottom).
        if (top <= bottom) {
            for (int i = right; i >= left; i--) {
                matrix[bottom][i] = curr ? curr->val : -1;
                if (curr) curr = curr->next;
            }
            bottom--; // Move the bottom boundary up.
        }

        // Fill left column (if left boundary has not surpassed right).
        if (left <= right) {
            for (int i = bottom; i >= top; i--) {
                matrix[i][left] = curr ? curr->val : -1;
                if (curr) curr = curr->next;
            }
            left++; // Move the left boundary right.
        }
    }

    return matrix;
}