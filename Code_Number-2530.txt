inline static void swap(int* a, int* b) {
  int n = *a;
  *a = *b;
  *b = n;
}

static void swap_down(int* nums, int nums_size, int icurr) {
  while (true) {
    int ileft = icurr * 2 + 1;
    int iright = ileft + 1;

    int imax = icurr;

    if (ileft < nums_size && nums[ileft] > nums[imax]) {
      imax = ileft;
    }

    if (iright < nums_size && nums[iright] > nums[imax]) {
      imax = iright;
    }

    if (imax == icurr) { break; }

    swap(&nums[icurr], &nums[imax]);
    
    icurr = imax;
  }
}

static void heapify(int* nums, int nums_size) {
  for (int i = nums_size / 2 - 1; i >= 0; i--) {
    swap_down(nums, nums_size, i);
  }
}

long long maxKelements(int* nums, int nums_size, int k) {
  heapify(nums, nums_size);

  long long score = 0;

  for (int t = 0; t < k; t++) {
    score += nums[0];
    nums[0] = (nums[0] + 2) / 3;
    swap_down(nums, nums_size, 0);
  }

  return score;
}