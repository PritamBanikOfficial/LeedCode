// Function to calculate the steps between `curr` and `curr + 1` in the lexicographical tree
long long calculateSteps(long long curr, long long n) {
    long long steps = 0;
    long long first = curr;
    long long last = curr + 1;

    while (first <= n) {
        steps += (last <= n + 1) ? (last - first) : (n + 1 - first);
        first *= 10;
        last *= 10;
    }
    return steps;
}

// Function to find the k-th smallest lexicographical number
int findKthNumber(int n, int k) {
    int curr = 1;  // Start from the first lexicographical number
    k -= 1;        // We have already considered '1' as the first lexicographical number

    while (k > 0) {
        long long steps = calculateSteps(curr, n);

        if (steps <= k) {
            // Move to the next sibling prefix
            k -= steps;
            curr++;
        } else {
            // Move to the next level (deeper in the lexicographical order)
            curr *= 10;
            k--;
        }
    }
    return curr;
}
